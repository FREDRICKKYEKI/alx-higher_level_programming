# 2-matrix_divided - matrix_divided(matrix, div)
===================================================
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test cases
================
>>> g_matrix = [[0.33, 0.67, 1.0],
...				[1.33, 1.67, 2.0]]

>>> g1_matrix = [[1, 2, 3], [4, 5, 6]]

>>> rl_matrix = [[1, 2],
...				[3, 7, 6],
...				[12, 7, 2]]

>>> t_matrix = [[1, "str", 9],
...				[3, 7, 6],
...				[12, 7, 2]]


>>> g_div = 3

>>> zd_div = 0

>>> t_div = "34"


# 0. functional test(s) (decimal places)
=========================================
>>> matrix_divided(g_matrix, g_div)
[[0.11, 0.22, 0.33], [0.44, 0.56, 0.67]]

>>> matrix_divided(g1_matrix, g_div)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


# 1 - row length
=======================================
>>> matrix_divided(rl_matrix, g_div)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size


# 2 - ZeroDivisionError
=======================================
>>> matrix_divided(rl_matrix, zd_div)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero


# 3 - TypeErrors
======================================
	# 3.1 element in row in matrix must be `int`  or `float`
	=================================================================
	>>> matrix_divided(t_matrix, g_div)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats


	# 3.2 `div` must be `int` or `float`
	================================================
	>>> matrix_divided(g_matrix, t_div)
	Traceback (most recent call last):
	...
	TypeError: div must be a number
